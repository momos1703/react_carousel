{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","itemWidth","frameSize","step","infinite","animationDuration","useState","firstImg","setFirstImg","carouselStyles","width","imageStyles","transition","transform","className","style","map","image","index","src","alt","String","cn","disabled","type","onClick","length","App","setItemWidth","imgOnPage","setImgOnPage","imgForChange","setImgForChange","setAnimationDuration","setInfinite","action","method","htmlFor","min","max","id","name","value","onChange","query","target","qty","time","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.ddbb9f7c.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\nimport './Carousel.scss';\nimport { ImageStyles } from '../types/ImageStyles';\nimport { CarouselStyles } from '../types/CarouselStyles';\n\ninterface Props {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  itemWidth,\n  frameSize,\n  step,\n  infinite,\n  animationDuration,\n}) => {\n  const [firstImg, setFirstImg] = useState(0);\n  const carouselStyles: CarouselStyles = {\n    width: `${frameSize * itemWidth}px`,\n  };\n  const imageStyles: ImageStyles = {\n    width: `${itemWidth}px`,\n    transition: `transform ${animationDuration}ms ease 0s`,\n  };\n\n  if ((frameSize * itemWidth) > 1300) {\n    carouselStyles.transform = `translateX(-${(frameSize * itemWidth - 1300) / 2}px)`;\n  }\n\n  if (firstImg > 0) {\n    imageStyles.transform = `translateX(-${itemWidth * firstImg}px)`;\n  }\n\n  const handleNext = () => {\n    if ((firstImg + step + frameSize) <= (images.length - 1)) {\n      setFirstImg(firstImg + step);\n    } else if (firstImg === ((images.length) - frameSize) && infinite) {\n      setFirstImg(0);\n    } else {\n      setFirstImg((images.length) - frameSize);\n    }\n  };\n\n  const handlePrev = () => {\n    if ((firstImg - step) > 0) {\n      setFirstImg(firstImg - step);\n    } else if (firstImg === 0 && infinite) {\n      setFirstImg((images.length) - frameSize);\n    } else {\n      setFirstImg(0);\n    }\n  };\n\n  return (\n    <div\n      className=\"Carousel\"\n    >\n      <ul\n        className=\"Carousel__list\"\n        style={carouselStyles}\n      >\n        {images.map((\n          image: string,\n          index: number,\n        ) => (\n          <li key={image}>\n            <img\n              src={image}\n              alt={`Img_${String(index + 1)}`}\n              style={imageStyles}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <div className=\"Carousel__buttons\">\n        <button\n          className={cn('button button__prev',\n            {\n              disabled: firstImg === 0 && !infinite,\n            })}\n          type=\"button\"\n          onClick={handlePrev}\n        >\n          Prev\n        </button>\n\n        <button\n          className={cn('button button__next',\n            {\n              disabled: firstImg === ((images.length) - frameSize) && !infinite,\n            })}\n          type=\"button\"\n          data-cy=\"next\"\n          onClick={handleNext}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import { useState } from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\nconst images: string[] = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nexport const App = () => {\n  const [itemWidth, setItemWidth] = useState(130);\n  const [imgOnPage, setImgOnPage] = useState(3);\n  const [imgForChange, setImgForChange] = useState(3);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n  const [infinite, setInfinite] = useState(false);\n\n  function handleChangeWidth(query: React.ChangeEvent<HTMLInputElement>) {\n    if (+query.target.value > 50) {\n      setItemWidth(+query.target.value);\n    } else {\n      setItemWidth(130);\n    }\n  }\n\n  function handleChangeFrame(qty: React.ChangeEvent<HTMLInputElement>) {\n    setImgOnPage(+(qty.target.value));\n  }\n\n  function handleChangeStep(step: React.ChangeEvent<HTMLInputElement>) {\n    setImgForChange(+(step.target.value));\n  }\n\n  function handleAnimationChange(time: React.ChangeEvent<HTMLInputElement>) {\n    setAnimationDuration(+(time.target.value));\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App__header\" data-cy=\"title\">\n        {`Carousel with ${images.length} images`}\n      </h1>\n\n      <form className=\"App__form\" action=\"#\" method=\"post\">\n        <label className=\"App__label\" htmlFor=\"itemWidth\">\n          Width:\n          <input\n            type=\"number\"\n            min=\"50\"\n            max=\"300\"\n            step=\"10\"\n            id=\"timer1\"\n            className=\"App__input\"\n            name=\"itemWidth\"\n            value={String(itemWidth)}\n            onChange={handleChangeWidth}\n          />\n        </label>\n\n        <label className=\"App__label\" htmlFor=\"frameSize\">\n          On page:\n          <input\n            type=\"number\"\n            min=\"3\"\n            max=\"10\"\n            id=\"timer2\"\n            className=\"App__input\"\n            name=\"frameSize\"\n            value={String(imgOnPage)}\n            onChange={handleChangeFrame}\n          />\n        </label>\n\n        <label className=\"App__label\" htmlFor=\"step\">\n          Step:\n          <input\n            type=\"number\"\n            min=\"1\"\n            max=\"10\"\n            id=\"timer3\"\n            className=\"App__input\"\n            name=\"step\"\n            value={String(imgForChange)}\n            onChange={handleChangeStep}\n          />\n        </label>\n\n        <label className=\"App__label\" htmlFor=\"animationDuration\">\n          Animation speed:\n          <input\n            type=\"number\"\n            min=\"0\"\n            max=\"10000\"\n            step=\"100\"\n            id=\"timer4\"\n            className=\"App__input\"\n            name=\"animationDuration\"\n            value={String(animationDuration)}\n            onChange={handleAnimationChange}\n          />\n        </label>\n\n        <label className=\"App__label\" htmlFor=\"infinite\">\n          Infinite:\n          <input\n            type=\"checkbox\"\n            className=\"App__checkbox\"\n            name=\"infinite\"\n            onChange={() => setInfinite(!infinite)}\n          />\n        </label>\n      </form>\n\n      <Carousel\n        images={images}\n        itemWidth={itemWidth}\n        frameSize={imgOnPage}\n        step={imgForChange}\n        animationDuration={animationDuration}\n        infinite={infinite}\n      />\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLElement).render(\n  <App />,\n);\n"],"sourceRoot":""}